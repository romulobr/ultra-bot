{"version":3,"sources":["welcome/deauthentication.js","welcome/welcome.js","App.js","serviceWorker.js","welcome/welcome-reducer.js","index.js"],"names":["deauthenticate","dispatch","cookies","erase","type","WelcomePanel","react_default","a","createElement","className","this","props","connected","src","user","profilePictureUrl","alt","origin","displayName","onClick","href","Component","connect","state","Object","objectSpread","authenticate","App","welcome_welcome","Boolean","window","location","hostname","match","defaultState","welcomeReducer","action","console","log","connectionError","error","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAOeA,MALf,SAAwBC,GACvBC,IAAQC,MAAM,gBACdF,EAAS,CAAEG,KAAM,8BCCZC,gOAKF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,4BAEDE,KAAKC,MAAMC,UACVN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKK,IAAKH,KAAKC,MAAMG,KAAKC,kBAAmBC,IAAI,iBACjDV,EAAAC,EAAAC,cAAA,0CACiCE,KAAKC,MAAMG,KAAKG,OADjD,MAC4D,IACzDP,KAAKC,MAAMG,KAAKI,YAAa,KAEhCZ,EAAAC,EAAAC,cAAA,UAAQW,QAAST,KAAKC,MAAMX,gBAA5B,eAGFM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGY,KAAK,gBAAR,wBAEFd,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGY,KAAK,iBAAR,kCA1BaC,aAyC3B,IAWeC,cAjBf,SAAyBC,GACvB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFD,IAIoB,SAAAtB,GACzB,MAAO,CACLD,eAAgB,WACdA,EAAeC,IAEpByB,aAAc,WACbzB,EAAS,CAACG,KAAK,sBAKFkB,CAGbjB,GC9CasB,0LARX,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoB,EAAD,cAJUP,cCQEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sEClBAC,EAAe,CACpBtB,WAAW,GA4BGuB,MAzBf,SAAwBZ,EAAOa,GAC9B,OAAQA,EAAOhC,MACd,IAAK,yBAEJ,OADAiC,QAAQC,IAAI,WAAWF,GAChB,CACNxB,WAAW,EACXE,KAAKU,OAAAC,EAAA,EAAAD,CAAA,GAAKY,IAGZ,IAAK,wBACJ,MAAO,CACNxB,WAAW,EACX2B,gBAAgBf,OAAAC,EAAA,EAAAD,CAAA,GACZY,EAAOI,QAIb,IAAK,oBACJ,MAAO,CAAC5B,WAAW,GAEpB,QACC,OAAOW,GAASW,YCdbO,EAAiBC,cAEjBC,EAAmBb,OAAOc,sCAAwCC,IAClEC,EAAQC,YAAYZ,EAAgBQ,EAAiBK,YAAgBP,KAI3EQ,IAASC,OACR5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUL,MAAOA,GAChBxC,EAAAC,EAAAC,cAAC4C,EAAD,OAEDC,SAASC,eAAe,SFuGnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f07f4da.chunk.js","sourcesContent":["import cookies from 'browser-cookies';\n\nfunction deauthenticate(dispatch) {\n\tcookies.erase('feathers-jwt');\n\tdispatch({ type: 'NOT_AUTHENTICATED' });\n}\n\nexport default deauthenticate;\n","import React, { Component } from 'react';\nimport './welcome.scss';\nimport deauthenticate from './deauthentication';\nimport { connect } from 'react-redux';\n\nclass WelcomePanel extends Component {\n  componentDidMount() {\n    // this.props.authenticate();\n  }\n  render() {\n    return (\n      <div className=\"welcome-panel\">\n        <header>\n          <h1>Welcome to V3</h1>\n        </header>\n        {this.props.connected ? (\n          <div>\n            <img src={this.props.user.profilePictureUrl} alt=\"user profile\" />\n            <p>\n              Welcome, you are connected to {this.props.user.origin} as{' '}\n              {this.props.user.displayName}{' '}\n            </p>\n            <button onClick={this.props.deauthenticate}>Disconnect</button>\n          </div>\n        ) : (\n          <div>\n            <p>You are not connected yet</p>\n            <p>\n              <a href=\"/auth/twitch\">Connect with twitch</a>\n            </p>\n            <p>\n              <a href=\"/auth/youtube\">Connect with youtube</a>\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deauthenticate: () => {\n      deauthenticate(dispatch);\n\t},\n\tauthenticate: () => {\n\t\tdispatch({type:'AUTHENTICATION'})\n\t}\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WelcomePanel);\n","import React, { Component } from 'react';\nimport WelcomePanel from './welcome/welcome'\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WelcomePanel/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultState = {\n\tconnected: false\n};\n\nfunction welcomeReducer(state, action) {\n\tswitch (action.type) {\n\t\tcase 'AUTHENTICATION_SUCCESS': {\n\t\t\tconsole.log('success:',action);\n\t\t\treturn {\n\t\t\t\tconnected: true,\n\t\t\t\tuser: {...action}\n\t\t\t};\n\t\t}\n\t\tcase 'AUTHENTICATION_FAILED': {\n\t\t\treturn {\n\t\t\t\tconnected: false,\n\t\t\t\tconnectionError: {\n\t\t\t\t\t...action.error\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tcase 'NOT_AUTHENTICATED': {\n\t\t\treturn {connected: false}\n\t\t}\n\t\tdefault:\n\t\t\treturn state || defaultState;\n\t}\n}\n\nexport default welcomeReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport welcomeReducer from './welcome/welcome-reducer';\nimport createSagaMiddleware from 'redux-saga';\n//import authentication from './welcome/authentication-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(welcomeReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\n//sagaMiddleware.run(authentication);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}