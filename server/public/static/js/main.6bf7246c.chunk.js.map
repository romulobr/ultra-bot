{"version":3,"sources":["welcome/authentication-saga.js","welcome/welcome.js","App.js","serviceWorker.js","welcome/welcome-reducer.js","index.js"],"names":["authentication","parseJwt","token","JSON","parse","atob","split","e","jwtCookie","parsedJwt","response","regenerator_default","a","wrap","_context","prev","next","document","cookie","put","type","abrupt","console","log","axios","get","sent","payload","t0","error","stop","_marked","this","WelcomePanel","props","authenticate","react_default","createElement","className","isConnected","twitchId","href","Component","connect","state","Object","objectSpread","App","welcome_welcome","Boolean","window","location","hostname","match","defaultState","connected","welcomeReducer","action","user","connectionError","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4VAWUA,GARJC,EAAW,SAACC,GACjB,IACC,OAAOC,KAAKC,MAAMC,KAAKH,EAAMI,MAAM,KAAK,KACvC,MAAOC,GACR,OAAO,OAIT,SAAUP,IAAV,IAAAQ,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAF,EAAAC,KAAA,EAEQP,EAAYS,SAASC,QAAUD,SAASC,OAAO,gBAFvD,CAAAJ,EAAAE,KAAA,eAIGG,YAAI,CAAEC,KAAM,sBAJfN,EAAAO,OAAA,iBASmB,OAFXZ,EAAYR,EAASO,GAC3Bc,QAAQC,IAAId,GARdK,EAAAE,KAAA,EASyBQ,IAAMC,IAAI,SAAU,IAT7C,OASQf,EATRI,EAAAY,KAUEP,YAAI,CAAEC,KAAM,yBAA0BO,QAASjB,IAC/CY,QAAQC,IAAI,kBAAmBb,GAXjCI,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,SAaEK,YAAI,CAAEC,KAAM,wBAAyBS,MAAKf,EAAAc,KAC1CN,QAAQC,IAAI,gBAAZT,EAAAc,IAdF,yBAAAd,EAAAgB,SAAAC,EAAAC,KAAA,UAkBehC,gBCxBTiC,8LAEJX,QAAQC,IAAI,+BACZS,KAAKE,MAAMC,gDAGX,OACCC,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,iBACdF,EAAAxB,EAAAyB,cAAA,cACCD,EAAAxB,EAAAyB,cAAA,4BAEAL,KAAKE,MAAMK,YACXH,EAAAxB,EAAAyB,cAAA,WACCD,EAAAxB,EAAAyB,cAAA,2CAAmCL,KAAKE,MAAMM,SAA9C,KACAJ,EAAAxB,EAAAyB,cAAA,6BAGDD,EAAAxB,EAAAyB,cAAA,WACCD,EAAAxB,EAAAyB,cAAA,gDACAD,EAAAxB,EAAAyB,cAAA,KAAGI,KAAK,gBAAR,oBAnBqBC,aA+BZC,kBAJf,SAAyBC,GACxB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKD,EAAZ,CAAmB5C,oBAGL2C,CAAyBV,GCtBzBc,0LARX,OACEX,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,OACbF,EAAAxB,EAAAyB,cAACW,EAAD,cAJUN,cCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uEClBAC,EAAe,CACpBC,WAAW,GA0BGC,MAvBf,SAAwBZ,EAAOa,GAC9B,OAAQA,EAAOrC,MACd,IAAK,yBACJ,MAAO,CACNmC,WAAW,EACXG,KAAKb,OAAAC,EAAA,EAAAD,CAAA,GACDY,EAAO9B,UAIb,IAAK,wBACJ,MAAO,CACN4B,WAAW,EACXI,gBAAgBd,OAAAC,EAAA,EAAAD,CAAA,GACZY,EAAO5B,QAIb,QACC,OAAOe,GAASU,YCZbM,EAAiBC,cAEjBC,EAAmBZ,OAAOa,sCAAwCC,IAClEC,EAAQC,YAAYV,EAAgBM,EAAiBK,YAAgBP,KAC3EA,EAAeQ,IAAIpE,GAEnBqE,IAASC,OACRlC,EAAAxB,EAAAyB,cAACkC,EAAA,EAAD,CAAUN,MAAOA,GAChB7B,EAAAxB,EAAAyB,cAACmC,EAAD,OAEDvD,SAASwD,eAAe,SFwGnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6bf7246c.chunk.js","sourcesContent":["import { put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nconst parseJwt = (token) => {\r\n\ttry {\r\n\t\treturn JSON.parse(atob(token.split('.')[1]));\r\n\t} catch (e) {\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nfunction* authentication() {\r\n\ttry {\r\n\t\tconst jwtCookie = document.cookie && document.cookie['feathers-jwt'];\r\n\t\tif (!jwtCookie) {\r\n\t\t\tput({ type: 'NOT_AUTHENTICATED' });\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst parsedJwt = parseJwt(jwtCookie);\r\n\t\tconsole.log(parsedJwt);\r\n\t\tconst response = yield axios.get('/users', {});\r\n\t\tput({ type: 'AUTHENTICATION_SUCCESS', payload: response });\r\n\t\tconsole.log('got a response:', response);\r\n\t} catch (e) {\r\n\t\tput({ type: 'AUTHENTICATION_FAILED', error: e });\r\n\t\tconsole.log('got an error:', e);\r\n\t}\r\n}\r\n\r\nexport default authentication;\r\n","import React, { Component } from 'react';\r\nimport './welcome.scss';\r\nimport authentication from './authentication-saga';\r\nimport { connect } from 'react-redux';\r\n\r\nclass WelcomePanel extends Component {\r\n\tcomponentDidMount() {\r\n\t\tconsole.log('component will mount called');\r\n\t\tthis.props.authenticate();\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"welcome-panel\">\r\n\t\t\t\t<header>\r\n\t\t\t\t\t<h1>Welcome to V3</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t{this.props.isConnected ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>You are connected to twitch as {this.props.twitchId} </p>\r\n\t\t\t\t\t\t<button>Disconnect</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p>You are not connected to twitch yet</p>\r\n\t\t\t\t\t\t<a href=\"/auth/twitch\">Connect</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn { ...state, authentication };\r\n}\r\n\r\nexport default connect(mapStateToProps)(WelcomePanel);\r\n","import React, { Component } from 'react';\nimport WelcomePanel from './welcome/welcome'\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WelcomePanel/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultState = {\r\n\tconnected: false\r\n};\r\n\r\nfunction welcomeReducer(state, action) {\r\n\tswitch (action.type) {\r\n\t\tcase 'AUTHENTICATION_SUCCESS': {\r\n\t\t\treturn {\r\n\t\t\t\tconnected: true,\r\n\t\t\t\tuser: {\r\n\t\t\t\t\t...action.payload\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase 'AUTHENTICATION_FAILED': {\r\n\t\t\treturn {\r\n\t\t\t\tconnected: false,\r\n\t\t\t\tconnectionError: {\r\n\t\t\t\t\t...action.error\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state || defaultState;\r\n\t}\r\n}\r\n\r\nexport default welcomeReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport welcomeReducer from './welcome/welcome-reducer';\nimport createSagaMiddleware from 'redux-saga';\nimport authentication from './welcome/authentication-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(welcomeReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\nsagaMiddleware.run(authentication);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}